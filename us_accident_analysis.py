# -*- coding: utf-8 -*-
"""US - Accident Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dMCSyKSV6eX0xk0yFXEXJsYNR4FyaAUZ
"""



"""#US Accidents (2016 - 2021)
A Countrywide Traffic Accident Dataset (2016 - 2021)

This is a countrywide car accident dataset, which covers 49 states of the USA. The accident data are collected from February 2016 to Dec 2021, using multiple APIs that provide streaming traffic incident (or event) data. These APIs broadcast traffic data captured by a variety of entities, such as the US and state departments of transportation, law enforcement agencies, traffic cameras, and traffic sensors within the road-networks. Currently, there are about 2.8 million accident records in this dataset. Check here to learn more about this dataset.

link_of_Dataset : https://www.kaggle.com/datasets/sobhanmoosavi/us-accidents

# US - Accident **Analysis**

ToDO - talk about EDA 
TODO - taalk about the dataset(source, what it contains, how it will be useful)
 - Kaggle
 - information about accidents
 - can useful to privent accidents
 - mention that this does not contain data about New York
"""

pip install opendatasets --upgrade --quiet



import opendatasets as od
download_url = 'https://www.kaggle.com/datasets/sobhanmoosavi/us-accidents'
od.download(download_url)

data_filename = '/content/us-accidents/US_Accidents_Dec21_updated.csv'



"""#Data Preparation and Cleaning

- Load the file using Pandas 
- look at some information about the data and the columns 
- Fix any missing or incorrect value 
"""

import pandas as pd

df = pd.read_csv(data_filename)

df

df.head()

df.tail()

df.columns

len(df.columns)

len(df)

df.info()

df.describe()

"""# Ask and answer the question

1. Are there more accidents in warmer or colder areas?
2. which 5 cities have the highest number of accidents? how about per capita?
3. does New York shows up in the data? If yes, why is the count lower ifff this the most populated city.
4. among the top 100 cities in number of accidents, which states do they belong to most frequently.
5. what time of the day are accident most freque?
6. which day of the week havethe most accident?
7. which month have the most accidents?

"""



numerics = ['int16','int32', 'int64', 'float16', 'float32', 'float64'  ]
numeric_df1 = df.select_dtypes(include=numerics)
numeric_df1



numeric_df = df.select_dtypes(include='number')

numeric_df

len(numeric_df.columns)

"""percentage of missing value per column"""

missing_percentage = df.isna().sum().sort_values(ascending = False)/len(df)

missing_percentage

type(missing_percentage)

missing_percentage.plot(kind = 'barh')



"""Removing zeros from missing_percentage
- True = not equal to zero
- False = zero values
"""

missing_percentage != 0

missing_percentage[missing_percentage != 0]

missing_percentage[missing_percentage != 0].plot(kind = 'barh')



"""Removing columns that I don't have to use"""



"""## Exploratory Analysis and Visualization

 - Columns we'll analyse

  1. City
  2. Start_Time
  3. start_Lat , Start_Lng

##City
"""

df.columns

df.City

cities = df.City.unique()

len(cities)

cities[:100]

cities_by_accidents = df.City.value_counts()

cities_by_accidents

cities_by_accidents[:20]

cities_by_accidents[:20].plot(kind = 'barh',figsize=(10,7))

import seaborn as sns

sns.distplot(cities_by_accidents)

high_accident_cities = cities_by_accidents[cities_by_accidents >= 1000]

low_accident_cities = cities_by_accidents[cities_by_accidents < 1000]

len(high_accident_cities)

len(high_accident_cities) / len(cities)

sns.distplot(high_accident_cities)

sns.distplot(low_accident_cities)

sns.histplot(low_accident_cities, log_scale = True)

cities_by_accidents[cities_by_accidents==1]

cities_by_accidents[cities_by_accidents==1].count()

df['City'][:50]



len(cities)

"""##Start_Time"""

df.Start_Time

df.Start_Time[0]

pd.to_datetime(df.Start_Time)

df.Start_Time = pd.to_datetime(df.Start_Time)

df.Start_Time[0]

df.Start_Time.dt.hour

sns.distplot(df.Start_Time.dt.hour, bins = 24, kde = False, norm_hist = True, hist_kws={"rwidth":0.75,'edgecolor':'black', 'alpha':1.0})

""" - High percentage of accidents and trafic occur between 12 pm to 18 pm (6 pm). 
 - Next higest percentage of accident and trafic is 6am to 9 am
"""

sns.distplot(df.Start_Time.dt.dayofweek, bins = 7, kde = False, norm_hist = True, hist_kws={"rwidth":0.75,'edgecolor':'black', 'alpha':1.0})

""" - From above we can say that more accidents occur in week from monday to friday """



"""Is the distribution of accidents by hour the same on weekends."""

Friday_Start_Time = df.Start_Time[df.Start_Time.dt.dayofweek == 4]
Friday_Start_Time

sns.distplot(Friday_Start_Time.dt.hour, bins = 24, kde = False, norm_hist = True, hist_kws={"rwidth":0.75,'edgecolor':'black', 'alpha':1.0})

""" -On monday, the peak occurs between 12 pm to 7 pm."""

Sunday_Start_Time = df.Start_Time[df.Start_Time.dt.dayofweek == 6]
Sunday_Start_Time

sns.distplot(Sunday_Start_Time.dt.hour, bins = 24, kde = False, norm_hist = True, hist_kws={"rwidth":0.75,'edgecolor':'black', 'alpha':1.0})

""" - On sunday, the peak occurs between 10 am to 11 pm. """

sns.distplot(Sunday_Start_Time.dt.month, bins = 12, kde = False, norm_hist = True, hist_kws={"rwidth":0.75,'edgecolor':'black', 'alpha':1.0})

sns.distplot(df.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True, hist_kws={"rwidth":0.75,'edgecolor':'black', 'alpha':1.0})

df.Start_Time.dt.year

df.Start_Time.dt.year==2019

df[df.Start_Time.dt.year==2019]

df_2019 = df[df.Start_Time.dt.year==2019]
sns.distplot(df_2019.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True, hist_kws={"rwidth":0.75,'edgecolor':'black', 'alpha':1.0})

df_2021 = df[df.Start_Time.dt.year==2021]
sns.distplot(df_2021.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True, hist_kws={"rwidth":0.75,'edgecolor':'black', 'alpha':1.0})



"""## Start Latitude and Longittude"""

df.Start_Lat

df.Start_Lng

sns.scatterplot(x = df.Start_Lng, y = df.Start_Lat)

sample_df = df.sample(int(0.1 * len(df)))

sample_df

sns.scatterplot(x = sample_df.Start_Lng, y = sample_df.Start_Lat, size = 0.001)

lat, log = df.Start_Lat[0], df.Start_Lng[0]
lat , log



import folium

map = folium.Map()
marker = folium.Marker((lat, log))
marker.add_to(map)
map

from folium.plugins import HeatMap

sample_df = df.sample(int(0.01 * len(df)))
lat_log_pairs = list(zip(list(sample_df.Start_Lat) , list(sample_df.Start_Lng)))

map = folium.Map()
HeatMap(lat_log_pairs).add_to(map)
map



'New York' in df.City





"""#### Summary and Conclusion

 - No data from New York
 - The nuber of accidents per cituy decreases exponantialy
 - Less then 5% of cities have more then 1000 yearly accidents. 
 - Over 1110 cities have reported just one accident(need to investigate)
"""

